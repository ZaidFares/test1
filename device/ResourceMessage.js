/*
 * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
 *
 * This software is dual-licensed to you under the MIT License (MIT) and
 * the Universal Permissive License (UPL). See the LICENSE file in the root
 * directory for license terms. You may choose either license, or both.
 *
 */

/**
 * Helpers for building resource report messages.
 *
 * @alias iotcs.message.Message.ResourceMessage
 * @class
 * @public
 * @memberof iotcs.message.Message
 */
iotcs.message.Message.ResourceMessage = class {
    /**
     * Helper method used for building a resource report message to be sent to the server.  The
     * resources objects can be generated by using the ResourceMessage.Resource.buildResource method.
     * The reportType must be taken from the ResourceMessage.Type enumeration.  If an invalid value is
     * given an exception is thrown.  The rM parameter is the reconciliationMark that can be calculated
     * by using the ResourceMessage.getMD5ofList over the array of paths of the resources given as
     * objects.  A resource is an object that must have at least 2 properties as strings: path and
     * methods.  Also methods must be string that represents a concatenation of valid HTTP methods comma
     * separated.
     *
     * @function buildResourceMessage
     * @memberof iotcs.message.Message.ResourceMessage
     * @public
     * @see {@link iotcs.message.Message.ResourceMessage.Resource.buildResource}
     * @see {@link iotcs.message.Message.ResourceMessage.Type}
     *
     * @param {object[]} resources - The array of resources that are included in the report message
     *        resource report message.
     * @param {string} endpointName - The endpoint that is giving the resource report.
     * @param {string} reportType - The type of the report.
     * @param {string} [rM] - The reconciliationMark used by the server to validate the report.
     * @returns {iotcs.message.Message} The instance of the resource report message to be sent to the
     *          server or <code>null</code> if the message could not be created.
     */
    static buildResourceMessage(resources, endpointName, reportType, rM) {
        _mandatoryArg(resources, 'array');

        resources.forEach(resource => {
            _mandatoryArg(resource, 'object');
            _mandatoryArg(resource.path, 'string');
            _mandatoryArg(resource.methods, 'string');

            resource.methods.split(',').forEach(method => {
                if (['GET', 'PUT', 'POST', 'HEAD', 'OPTIONS', 'CONNECT', 'DELETE', 'TRACE'].indexOf(method) < 0) {
                    iotcs.error('Invalid method in resource message.');
                    return;
                }
            });
        });

        _mandatoryArg(endpointName, 'string');
        _mandatoryArg(reportType, 'string');

        if (Object.keys(iotcs.message.Message.ResourceMessage.Type).indexOf(reportType) < 0) {
            iotcs.error('invalid report type given');
            return null;
        }

        _optionalArg(rM, 'string');

        let payload = {
            type: 'JSON',
            value: {}
        };

        payload.value.reportType = reportType;
        payload.value.endpointName = endpointName;
        payload.value.resources = resources;

        if (rM) {
            payload.value.reconciliationMark = rM;
        }

        let message = new iotcs.message.Message();

        message.type(iotcs.message.Message.Type.RESOURCES_REPORT)
            .payload(payload);

        return message;
    }

    /**
     * This generates an MD5 hash of an array of strings.  This must to be used to generate the
     * reconciliationMark of the resource report message.
     *
     * @function getMD5ofList
     * @memberof iotcs.message.Message.ResourceMessage
     * @public
     *
     * @param {string[]} stringArray - The array of strings to use to generate the hash.
     * @returns {string} The MD5 hash.
     */
    static getMD5ofList(stringArray) {
        _mandatoryArg(stringArray, 'array');

        stringArray.forEach(str => {
            _mandatoryArg(str, 'string');
        });

        let hash = forge.md.md5.create();

        for (let i = 0; i < stringArray.length; i++) {
            hash.update(stringArray[i]);
        }

        return hash.digest().toHex();
    }
};

/**
 * Enumeration of the type of resource report messages.
 *
 * @alias Type
 * @class
 * @enum {string}
 * @memberof iotcs.message.Message.ResourceMessage
 * @public
 * @readonly
 * @static
 */
iotcs.message.Message.ResourceMessage.Type = {
    UPDATE: 'UPDATE',
    DELETE: 'DELETE',
    RECONCILIATION: 'RECONCILIATION'
};

Object.freeze(iotcs.message.Message.ResourceMessage.Type);
